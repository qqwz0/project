# Generated by Django 5.1.4 on 2025-01-13 19:49

from django.db import migrations
import re


def populate_faculties_and_specialties(apps, schema_editor):
    """Створює базові факультети та спеціальності"""
    Faculty = apps.get_model('catalog', 'Faculty')
    Specialty = apps.get_model('catalog', 'Specialty')
    
    # Створюємо ОДИН факультет
    faculty, created = Faculty.objects.get_or_create(
        code='ФЕ',
        defaults={'name': 'Факультет електроніки'}
    )
    
    # Створюємо спеціальності відповідно до фото
    specialties_data = [
        {'code': '121', 'name': 'Інженерія програмного забезпечення', 'education_level': 'bachelor'},
        {'code': '121', 'name': 'Інженерія програмного забезпечення', 'education_level': 'master'},
        {'code': '122', 'name': "Комп'ютерні науки", 'education_level': 'bachelor'},
        {'code': '122', 'name': "Комп'ютерні науки", 'education_level': 'master'},
        {'code': '126', 'name': 'Інформаційні системи та технології', 'education_level': 'bachelor'},
        {'code': '126', 'name': 'Інформаційні системи та технології', 'education_level': 'master'},
        {'code': '171', 'name': 'Електроніка', 'education_level': 'bachelor'},
        {'code': '171', 'name': 'Електроніка', 'education_level': 'master'},
        {'code': '176', 'name': 'Мікро- та наносистемна техніка', 'education_level': 'bachelor'},
        {'code': '176', 'name': 'Мікро- та наносистемна техніка', 'education_level': 'master'},
    ]
    
    created_specialties = {}
    for specialty_data in specialties_data:
        specialty, created = Specialty.objects.get_or_create(
            code=specialty_data['code'],
            faculty=faculty,
            education_level=specialty_data['education_level'],
            defaults={'name': specialty_data['name']}
        )
        key = f"{specialty_data['code']}_{specialty_data['education_level']}"
        created_specialties[key] = specialty
    
    return created_specialties


def migrate_streams_to_new_structure(apps, schema_editor):
    """Мігрує існуючі потоки до нової структури"""
    Stream = apps.get_model('catalog', 'Stream')
    Specialty = apps.get_model('catalog', 'Specialty')
    Group = apps.get_model('catalog', 'Group')
    
    # Спочатку створюємо спеціальності
    created_specialties = populate_faculties_and_specialties(apps, schema_editor)
    
    # Мапінг кодів потоків до спеціальностей
    # ФЕП = 121 (Інженерія програмного забезпечення)
    # ФЕІ = 122 (Комп'ютерні науки) 
    # ФЕС = 126 (Інформаційні системи та технології)
    # ФЕЛ = 171 (Електроніка)
    # ФЕМ = 176 (Мікро- та наносистемна техніка)
    stream_to_specialty_mapping = {
        'ФЕП': '121',  # Інженерія програмного забезпечення
        'ФЕІ': '122',  # Комп'ютерні науки
        'ФЕС': '126',  # Інформаційні системи та технології
        'ФЕЛ': '171',  # Електроніка
        'ФЕМ': '176',  # Мікро- та наносистемна техніка
    }
    
    # Обробляємо кожен потік
    for stream in Stream.objects.all():
        if not stream.specialty_id:  # Якщо ще не має нової спеціальності
            # Визначаємо рівень освіти з коду потоку
            education_level = 'master' if stream.stream_code.endswith('м') else 'bachelor'
            
            # Витягуємо код факультету з коду потоку (ФЕС-2 -> ФЕС)
            match = re.match(r'([А-ЯІЇЄҐ]+)-(\d)', stream.stream_code)
            if match:
                faculty_code = match.group(1)
                course_number = int(match.group(2))
                
                # Знаходимо відповідну спеціальність
                specialty_code = stream_to_specialty_mapping.get(faculty_code)
                if specialty_code:
                    key = f"{specialty_code}_{education_level}"
                    specialty = created_specialties.get(key)
                    
                    if specialty:
                        stream.specialty = specialty
                        
                        # Визначаємо рік вступу з коду потоку
                        current_year = 2025  # Поточний навчальний рік
                        stream.year_of_entry = current_year - course_number + 1
                        
                        stream.save()
                        
                        # Створюємо групи для цього потоку
                        # Наприклад, для ФЕС-2 створюємо групи ФЕС-21, ФЕС-22, ФЕС-23
                        for group_number in range(1, 4):  # Створюємо 3 групи
                            group_code = f"{faculty_code}-{course_number}{group_number}"
                            Group.objects.get_or_create(
                                group_code=group_code,
                                defaults={'stream': stream}
                            )


def reverse_migration(apps, schema_editor):
    """Зворотна міграція - видаляє створені дані"""
    Faculty = apps.get_model('catalog', 'Faculty')
    Specialty = apps.get_model('catalog', 'Specialty')
    Group = apps.get_model('catalog', 'Group')
    Stream = apps.get_model('catalog', 'Stream')
    
    # Очищаємо зв'язки потоків
    Stream.objects.update(specialty=None)
    
    # Видаляємо створені дані
    Group.objects.all().delete()
    Specialty.objects.all().delete()
    Faculty.objects.all().delete()


class Migration(migrations.Migration):

    dependencies = [
        ('catalog', '0021_add_normalized_structure'),
    ]

    operations = [
        migrations.RunPython(
            migrate_streams_to_new_structure,
            reverse_migration
        ),
    ]
