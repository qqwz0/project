# Generated by Django 5.2.4 on 2025-09-17 04:57

from django.db import migrations


def populate_initial_data(apps, schema_editor):
    """
    Заповнює базу даних початковими даними для факультетів, кафедр, спеціальностей, потоків та груп.
    Використовує get_or_create для уникнення конфліктів з існуючими даними.
    """
    Faculty = apps.get_model('catalog', 'Faculty')
    Department = apps.get_model('catalog', 'Department')
    Specialty = apps.get_model('catalog', 'Specialty')
    Stream = apps.get_model('catalog', 'Stream')
    Group = apps.get_model('catalog', 'Group')
    
    # 1. Створюємо факультет електроніки
    faculty, created = Faculty.objects.get_or_create(
        short_name='electronics',
        defaults={
            'name': 'Факультет електроніки'
        }
    )
    
    # 2. Створюємо кафедри
    departments_data = [
        'Сенсорної та напівпровідникової електроніки',
        'Системного проектування',
        'Фізичної та біомедичної електроніки',
        'Радіофізики та комп\'ютерних технологій',
        'Радіоелектронних і комп\'ютерних систем',
        'Оптоелектроніки та інформаційних технологій',
    ]
    
    created_departments = {}
    for dept_name in departments_data:
        department, created = Department.objects.get_or_create(
            department_name=dept_name,
            defaults={'faculty': faculty}
        )
        created_departments[dept_name] = department
    
    # 3. Створюємо спеціальності
    # Тільки ФЕІ (122) та ФЕМ (176) мають магістратуру
    specialties_data = [
        {'code': '121', 'name': 'Інженерія програмного забезпечення', 'education_level': 'bachelor'},
        {'code': '122', 'name': "Комп'ютерні науки", 'education_level': 'bachelor'},
        {'code': '122', 'name': "Комп'ютерні науки", 'education_level': 'master'},
        {'code': '126', 'name': 'Інформаційні системи та технології', 'education_level': 'bachelor'},
        {'code': '171', 'name': 'Електроніка', 'education_level': 'bachelor'},
        {'code': '176', 'name': 'Мікро- та наносистемна техніка', 'education_level': 'bachelor'},
        {'code': '176', 'name': 'Мікро- та наносистемна техніка', 'education_level': 'master'},
    ]
    
    created_specialties = {}
    for specialty_data in specialties_data:
        specialty, created = Specialty.objects.get_or_create(
            code=specialty_data['code'],
            faculty=faculty,
            education_level=specialty_data['education_level'],
            defaults={'name': specialty_data['name']}
        )
        key = f"{specialty_data['code']}_{specialty_data['education_level']}"
        created_specialties[key] = specialty
    
    # 4. Створюємо потоки
    # Мапінг кодів потоків до спеціальностей
    stream_to_specialty_mapping = {
        'ФЕП': '121',  # Інженерія програмного забезпечення
        'ФЕІ': '122',  # Комп'ютерні науки
        'ФЕС': '126',  # Інформаційні системи та технології
        'ФЕЛ': '171',  # Електроніка
        'ФЕМ': '176',  # Мікро- та наносистемна техніка
    }
    
    # Створюємо потоки для кожного курсу (1-4) та рівня освіти
    current_year = 2025
    streams_created = []
    
    for faculty_code, specialty_code in stream_to_specialty_mapping.items():
        # Визначаємо які рівні освіти доступні для цієї спеціальності
        education_levels = ['bachelor']  # За замовчуванням бакалаврат
        if specialty_code in ['122', '176']:  # ФЕІ та ФЕМ мають магістратуру
            education_levels.append('master')
        
        for education_level in education_levels:
            for course in range(1, 5):  # Курси 1-4
                # Формуємо код потоку
                stream_code = f"{faculty_code}-{course}"
                if education_level == 'master':
                    stream_code += 'м'
                
                # Знаходимо спеціальність
                key = f"{specialty_code}_{education_level}"
                specialty = created_specialties.get(key)
                
                if specialty:
                    stream, created = Stream.objects.get_or_create(
                        stream_code=stream_code,
                        defaults={
                            'specialty': specialty,
                            'work_name': f'Курсова робота ({specialty.name})'
                        }
                    )
                    streams_created.append(stream)
    
    # 5. Створюємо групи для кожного потоку
    for stream in streams_created:
        # Витягуємо код факультету та курс з коду потоку
        faculty_code = stream.stream_code.split('-')[0]
        course_number = stream.stream_code.split('-')[1].replace('м', '')
        
        # Створюємо 3 групи для кожного потоку
        for group_number in range(1, 4):
            group_code = f"{faculty_code}-{course_number}{group_number}"
            Group.objects.get_or_create(
                group_code=group_code,
                defaults={'stream': stream}
            )


class Migration(migrations.Migration):

    dependencies = [
        ('catalog', '0034_filecomment_parent'),
    ]

    operations = [
        migrations.RunPython(
            populate_initial_data,
            migrations.RunPython.noop
        ),
    ]
