# Generated by Django 5.1.4 on 2025-01-13 20:30

from django.db import migrations


def migrate_students_to_new_structure(apps, schema_editor):
    """Мігрує студентів з OnlyStudent до OnlyStudentNew"""
    OnlyStudent = apps.get_model('catalog', 'OnlyStudent')
    OnlyStudentNew = apps.get_model('catalog', 'OnlyStudentNew')
    Group = apps.get_model('catalog', 'Group')
    CustomUser = apps.get_model('users', 'CustomUser')
    
    print("=== ПОЧАТОК МІГРАЦІЇ СТУДЕНТІВ ===")
    
    migrated_count = 0
    errors = []
    
    for old_student in OnlyStudent.objects.all():
        try:
            # Отримуємо користувача
            user = old_student.student_id
            user_name = f"{user.first_name} {user.last_name}"
            academic_group = getattr(user, 'academic_group', None)
            
            if not academic_group:
                errors.append(f"Студент {user_name}: немає academic_group")
                continue
            
            # Шукаємо відповідну групу
            try:
                group = Group.objects.get(group_code=academic_group)
            except Group.DoesNotExist:
                errors.append(f"Студент {user_name}: група {academic_group} не знайдена")
                continue
            
            # Перевіряємо чи студент вже існує в новій структурі
            if OnlyStudentNew.objects.filter(student_id=user).exists():
                print(f"  ПРОПУСКАЄМО: {user_name} вже є в новій структурі")
                continue
            
            # Створюємо нового студента
            new_student = OnlyStudentNew.objects.create(
                student_id=user,
                group=group,
                additional_email=getattr(old_student, 'additional_email', None) or '',
                phone_number=getattr(old_student, 'phone_number', None) or ''
            )
            
            print(f"  ✅ МІГРОВАНО: {user_name} → група {group.group_code}")
            migrated_count += 1
            
        except Exception as e:
            user_name = f"{user.first_name} {user.last_name}" if 'user' in locals() else "Невідомий"
            errors.append(f"Студент {user_name}: помилка {str(e)}")
    
    print(f"\n=== РЕЗУЛЬТАТ МІГРАЦІЇ ===")
    print(f"Успішно мігровано: {migrated_count} студентів")
    
    if errors:
        print(f"Помилки ({len(errors)}):")
        for error in errors:
            print(f"  ❌ {error}")
    
    print("=== КІНЕЦЬ МІГРАЦІЇ СТУДЕНТІВ ===")


def reverse_migration(apps, schema_editor):
    """Видаляє всіх студентів з нової структури"""
    OnlyStudentNew = apps.get_model('catalog', 'OnlyStudentNew')
    
    count = OnlyStudentNew.objects.count()
    OnlyStudentNew.objects.all().delete()
    
    print(f"Видалено {count} студентів з нової структури")


class Migration(migrations.Migration):

    dependencies = [
        ('catalog', '0022_populate_normalized_data'),
    ]

    operations = [
        migrations.RunPython(
            migrate_students_to_new_structure,
            reverse_migration
        ),
    ]
