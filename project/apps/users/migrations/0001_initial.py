# Generated by Django 5.1.6 on 2025-03-07 20:18

import django.contrib.auth.models
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('role', models.CharField(choices=[('Студент', 'Студент'), ('Викладач', 'Викладач')], default='Студент', max_length=10)),
                ('academic_group', models.CharField(max_length=6, null=True)),
                ('department', models.CharField(choices=[('Сенсорної та напівпровідникової електроніки', 'Сенсорної та напівпровідникової електроніки'), ('Системного проектування', 'Системного проектування'), ('Фізичної та біомедичної електроніки', 'Фізичної та біомедичної електроніки'), ("Радіофізики та комп'ютерних технологій", "Радіофізики та комп'ютерних технологій"), ("Радіоелектронних і комп'ютерних систем", "Радіоелектронних і комп'ютерних систем"), ('Оптоелектроніки та інформаційних технологій', 'Оптоелектроніки та інформаційних технологій')], max_length=100, null=True)),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profile_pics/')),
                ('patronymic', models.CharField(blank=True, max_length=150, null=True, verbose_name='По-батькові')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Stream',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('specialty_name', models.CharField(max_length=100)),
                ('stream_code', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='OnlyStudent',
            fields=[
                ('student_id', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('speciality', models.CharField(max_length=100)),
                ('course', models.IntegerField()),
                ('academic_group', models.CharField(max_length=50)),
                ('additional_email', models.EmailField(blank=True, max_length=254, null=True)),
                ('phone_number', models.CharField(blank=True, max_length=15, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='OnlyTeacher',
            fields=[
                ('teacher_id', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('academic_level', models.CharField(choices=[('Асистент', 'Асистент'), ('Доцент', 'Доцент'), ('Професор', 'Професор')], default='Асистент', max_length=50)),
                ('additional_email', models.EmailField(blank=True, max_length=254, null=True)),
                ('phone_number', models.CharField(blank=True, max_length=20, null=True)),
                ('photo', models.ImageField(blank=True, null=True, upload_to='teacher_photos/')),
                ('position', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Slot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quota', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('occupied', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('stream_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.stream')),
                ('teacher_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.onlyteacher')),
            ],
        ),
        migrations.CreateModel(
            name='StudentTheme',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('theme', models.CharField(max_length=100)),
                ('student_id', models.ForeignKey(limit_choices_to={'role': 'student'}, on_delete=django.db.models.deletion.CASCADE, related_name='users_student_themes', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TeacherTheme',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('theme', models.CharField(max_length=100)),
                ('theme_description', models.TextField()),
                ('is_occupied', models.BooleanField(default=False)),
                ('teacher_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.onlyteacher')),
            ],
        ),
        migrations.CreateModel(
            name='Request',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('motivation_text', models.TextField()),
                ('request_date', models.DateTimeField(auto_now_add=True)),
                ('request_status', models.CharField(choices=[('pending', 'очікується'), ('accepted', 'прийнятий'), ('rejected', 'відхилений')], default='pending', max_length=100)),
                ('rejected_reason', models.TextField(blank=True, null=True)),
                ('student_id', models.ForeignKey(limit_choices_to={'role': 'student'}, on_delete=django.db.models.deletion.CASCADE, related_name='users_student_requests', to=settings.AUTH_USER_MODEL)),
                ('slot', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='users.slot')),
                ('student_themes', models.ManyToManyField(blank=True, to='users.studenttheme')),
                ('teacher_theme', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='users.teachertheme')),
                ('teacher_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='users.onlyteacher')),
            ],
        ),
    ]
